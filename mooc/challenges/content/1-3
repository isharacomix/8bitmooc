%% name: Drawing Sprites
%% autograde: easy3
%% ordering: 3

% description
In this assignment, you will write a [[subroutine]] that will draw the paddles
and ball of a pong game.

You will prepare the [[OAM|oam]] data for the sprites in the memory locations
on page $03. This project requires a total of seven 8x8 sprites, three sprites
for the left paddle, three for the right paddle, and one for the ball.

### Variables
 * ```PADDLE1X``` and ```PADDLE1Y``` The X and Y position of the top-left pixel
   of the paddle on left side.
 * ```PADDLE2X``` and ```PADDLE2Y``` Same for the right side.
 * ```BALLX``` and ```BALLY``` The X and Y position of the top-left pixel of the
   ball.

### Where to store the information
 * ```$304-$307``` Top segment of left paddle
 * ```$308-$30B``` Middle segment of left paddle
 * ```$30C-$30F``` Bottom segment of left paddle
 * ```$310-$313``` Ball
 * ```$314-$317``` Top segment of right paddle
 * ```$318-$31B``` Middle segment of right paddle
 * ```$31C-$31F``` Bottom segment of right paddle


### Tips
 * Make sure your subroutine ends with an [[RTS|rts]] instruction
 * If you make any labels in the subroutine, make sure they all begin with
   ```draw_```
 * If you need extra memory locations, use the [[zero page|zero_page]] - don't
   use any other RAM, since it might be used for other parts of the program.
   

% preamble
;----------------------------------------
; Put the name of your program and a basic explanation
; of how it works here.
;
; The START label is where the program begins. Here you
; should initialize your program's variables. Make sure
; you turn on your graphics before the infinite loop
; starts!
;----------------------------------------
START:                                  ;
    .define PLAYER1X=$200               ;
    .define PLAYER1Y=$201               ;
    .define PLAYER2X=$202               ;
    .define PLAYER2Y=$203               ;
    .define BALLX=$204                  ;
    .define BALLY=$205                  ;
    .define BALLDX=$206                 ;
    .define BALLDY=$207                 ;
    LDA #10                             ;
    STA PLAYER1X                        ;
    LDA #230                            ;
    STA PLAYER2X                        ;
    LDA #50                             ;
    STA PLAYER1Y                        ;
    STA PLAYER2Y                        ;
    STA BALLX                           ;
    STA BALLY                           ;
    INC BALLDX
    INC BALLDY
    LDA #%10010000                      ; enable NMI, sprites from Pattern Table 1
    STA PPUCTRL                         ;
    LDA #%00010100                      ; enable sprites
    STA PPUMASK                         ;
INFLOOP: JMP INFLOOP                    ;
;----------------------------------------
;
; The NMI (non-maskable interrupt) code is run whenever
; the screen refreshes.
;----------------------------------------
NMI:                                    ;
    JSR handle_input                    ;
    JSR ai                              ;
                                        ;
    LDA BALLX                           ;
    CLC                                 ;
    ADC BALLDX                          ;
    STA BALLX                           ;
    LDA BALLY                           ;
    CLC                                 ;
    ADC BALLDY                          ;
    STA BALLY                           ;
                                        ;
    JSR collisions                      ;
    JSR render                          ;
    RTI                                 ; Return from interrupt whenever
;---------------------------------------- the frame code is finished.



;----------------------------------------
; Handle input
;----------------------------------------
handle_input:                           ;
    LDX #1                              ; Strobe the controller
    STX CONTROL1                        ;
    DEX                                 ;
    STX CONTROL1                        ;
                                        ;
    LDA CONTROL1                        ; Get rid of A, B, Start, Select
    LDA CONTROL1                        ; We only need to look at the next
    LDA CONTROL1                        ; two reads, now.
    LDA CONTROL1                        ;
                                        ;
    LDA CONTROL1                        ; looking at UP
    AND #1                              ;
    BEQ not_up                          ; If not pressed, zero flag is set
    DEC PLAYER1Y                        ;
    DEC PLAYER1Y                        ;
not_up:                                 ;
    LDA CONTROL1                        ;
    AND #1                              ;
    BEQ not_down                        ;
    INC PLAYER1Y                        ;
    INC PLAYER1Y                        ;
not_down:                               ;
    RTS                                 ;
;----------------------------------------
; The ai controls paddle 2.
;----------------------------------------
ai:                                     ;
    INC PLAYER2Y                        ; The AI isn't very smart.
    INC PLAYER2Y                        ; The AI isn't very smart.
    RTS                                 ;
;----------------------------------------
; Collisions
;----------------------------------------
collisions:                             ;
    LDY BALLY                           ;
    LDX BALLX
    CPY #6                              ;
    BCS nohittop                        ;
    LDA #1                              ;
    STA BALLDY                          ;
nohittop:                               ;
    CPY #220                            ;
    BCC nohitbottom                     ;
    LDA #-1                             ;
    STA BALLDY                          ;
nohitbottom:                            ;
    CPX #2
    BCS nohitleft
    LDA #1
    STA BALLDX
    LDA #100
    STA BALLX
nohitleft:
    CPX #244
    BCC nohitright
    LDA #-1
    STA BALLDX
    LDA #100
    STA BALLX
nohitright:
    CPX #18
    BNE nohitlpad
    LDX #40
    LDY PLAYER1Y
    DEY
    DEY
    DEY
    DEY
    DEY
    DEY
    DEY
    DEY
lpadloop:
    CPY BALLY
    BEQ hitlpad
    INY
    DEX
    BEQ nohitlpad
    JMP lpadloop
hitlpad:    
    LDA #1
    STA BALLDX
nohitlpad:
    LDX BALLX
    CPX #222
    BNE nohitrpad
    LDX #40
    LDY PLAYER2Y
    DEY
    DEY
    DEY
    DEY
    DEY
    DEY
    DEY
    DEY
rpadloop:
    CPY BALLY
    BEQ hitrpad
    INY
    DEX
    BEQ nohitrpad
    JMP rpadloop
hitrpad:
    LDA #-1
    STA BALLDX
nohitrpad:
    RTS                                 ;
;----------------------------------------


;----------------------------------------
; Render:
;
; This takes the sprites and puts the
; information in page 3, where the OAM
; data goes. This is what the student writes.
;----------------------------------------
render:                                 ;


% postamble
;----------------------------------------




; ******************************************************
; STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP
;
; Don't change any of the code underneath this line unless
; you know what you are doing. Unlike many computers, the
; NES has to have time to warm up before it can run code.
; This code will warm up the NES, clear out the memory,
; and put it in a known state so that you can write the
; important stuff up above.
;*******************************************************
.org $F000                              ;
RESET:                                  ;
        SEI                             ; Disable IRQs
        CLD                             ; Disable decimal mode (not on NES)
        LDX #$40                        ;
        STX FRAMECTRL                   ; Disable APU frame IRQ
        LDX #$FF                        ;
        TXS                             ; Set stack pointer to top of stack
        INX                             ; Set X to 0
        STX PPUCTRL                     ; Disable NMI
        STX PPUMASK                     ; Disable rendering
        STX DMCFREQ                     ; Disable DMC IRQs
vblankwait1:                            ; Wait for the first vertical blank to
        BIT PPUSTATUS                   ;    ensure PPU is ready.
        BPL vblankwait1                 ;
clrmem:                                 ; Zero out all memory
        LDA #$00                        ;
        STA $0000, x                    ;
        STA $0100, x                    ;
        STA $0200, x                    ;
        STA $0400, x                    ;
        STA $0500, x                    ;
        STA $0600, x                    ;
        STA $0700, x                    ;
        LDA #$FE                        ;
        STA $0300, x                    ;
        INX                             ;
        BNE clrmem                      ;
vblankwait2:                            ; After 2 vertical blanks, the PPU is
        BIT PPUSTATUS                   ;    is ready to go.
        BPL vblankwait2                 ;
;----------------------------------------
; Now we load our sprite palettes.
;----------------------------------------
        LDA PPUSTATUS                   ; read PPU status to reset the high/low latch
        LDA #$3F                        ;
        STA PPUADDR                     ; write the high byte of $3F00 address
        LDA #$00                        ;
        STA PPUADDR                     ; write the low byte of $3F00 address
        LDX #$00                        ; start out at 0
loadpalettes:                           ;
        LDA palette, x                  ; load data from address (palette + the value in x)
        STA PPUDATA                     ; write to PPU
        INX                             ; X = X + 1
        CPX #$20                        ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
        BNE loadpalettes                ; Branch to LoadPalettesLoop if compare was Not Equal to zero
                                        ; if compare was equal to 32, keep going down
;----------------------------------------
; Now load a blank background. We need to fill $1000 bytes from $2000 to $3000
;----------------------------------------
        LDA PPUSTATUS                   ; read PPU status to reset the high/low latch                                      
        LDA #$20                        ; Background VRAM starts at $2000
        STA PPUADDR                     ;
        LDA #$00                        ;
        STA PPUADDR                     ;
        LDA #$00                        ; We will zero out the VRAM.
        LDX #$10                        ; We have to iterate over 0-256 only $10 times.
        LDY #$00                        ;
bkgloop:                                ;
        STA PPUDATA                     ; Write to the VRAM. Note that no matter how the
        DEY                             ; scroll mirroring is set, this will work.
        BNE bkgloop                     ; BNE will jump if Y != 0
        DEX                             ;
        BNE bkgloop                     ; BNE will jump if X != 0
        LDA #$00                        ;
        STA SCROLL                      ; Set the scrolling to 0
        STA SCROLL                      ;
        JMP START                       ;
;----------------------------------------
; Here's the color palette.
;----------------------------------------
palette:                                ;
        .db $0F,$31,$32,$33             ;
        .db $0F,$35,$36,$37             ;
        .db $0F,$39,$3A,$3B             ;
        .db $0F,$3D,$3E,$0F             ;
        .db $0F,$28,$18,$38             ;
        .db $0F,$1C,$0C,$2C             ;
        .db $0F,$15,$05,$25             ;
        .db $0F,$02,$38,$3C             ;
;----------------------------------------        
; Interrupt table - located in the last six bytes of memory.
;----------------------------------------
        .org $FFFA                      ; Interrupt table is last three words
        .dw NMI                         ; When an NMI happens (once per frame
                                        ;   if enabled, the draw loop)
        .dw RESET                       ; When the processor first turns on or
                                        ;   is reset, it will jump to RESET
        .dw 0                           ; External interrupt IRQ is not used
;----------------------------------------
; Define all of the memory locations in the memory map.
;----------------------------------------
    .define ZEROPAGE=$0000              ;
    .define STACK=$0100                 ;
    .define PPUCTRL=$2000               ;
    .define PPUMASK=$2001               ;
    .define PPUSTATUS=$2002             ;
    .define OAMADDR=$2003               ;
    .define OAMDATA=$2004               ;
    .define SCROLL=$2005                ;
    .define PPUADDR=$2006               ;
    .define PPUDATA=$2007               ;
    .define SQ1VOL=$4000                ;
    .define SQ1SWEEP=$4001              ;
    .define SQ1LO=$4002                 ;
    .define SQ1HI=$4003                 ;
    .define SQ2VOL=$4004                ;
    .define SQ2SWEEP=$4005              ;
    .define SQ2LO=$4006                 ;
    .define SQ2HI=$4007                 ;
    .define TRILIN=$4008                ;
    .define TRILO=$400A                 ;
    .define TRIHI=$400B                 ;
    .define NOISEVOL=$400C              ;
    .define NOISELO=$400E               ;
    .define NOISEHI=$400F               ;
    .define DMCFREQ=$4010               ;
    .define DMCRAW=$4011                ;
    .define DMCSTART=$4012              ;
    .define DMCLEN=$4013                ;
    .define OAMDMA=$4014                ;
    .define SNDCHNL=$4015               ;
    .define CONTROL1=$4016              ;
    .define CONTROL2=$4017              ;
    .define FRAMECTRL=$4018             ;
    .define PRGROM=$8000                ;
;----------------------------------------




