%% name: The Game of Life
%% autograde: hard1
%% ordering: 7

% description
The [Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life) is a
zero-player game developed by mathematician John H. Conway that defines a series
of rules that manage the life and death of organisms on a grid.

The rules of game of life are as follows:

 * There is a grid of cells.
 * A cell is either alive or dead.
 * Cells that are adjacent to other cells, including diagonally are referred to
   as neighbors.
 * All cells have eight neighbors. A cell on the border's neighbors "wrap around"
   to the other side of the grid.
 * The game proceeds in turns called "generations". Each generation, the number
   of neighbors of each cell is calculated.
 * If a cell began a generation dead and had exactly three living neighbors, the cell
   will be alive at the beginning of the next generation
 * If a cell began a generation alive and has two or three living neighbors, the
   cell will remain alive.
 * If a cell began a generation alive and has less than two living neighbors or
   more than three living neighbors, it will die - as if caused by loneliness
   or overcrowding.

This simple rules define a complicated mathematical simulation referred to as
a *cellular automaton*, and has been studied extensively since it was first
conceived in 1970. In this assignment, you will write a subroutine that
takes a 16x16 grid of cells as input, and changes the grid following the rules
above so that one generation will have passed. The program on the right will
allow you to use the directional pad to move the cursor, the NES 'A' button
(the X key) to toggle the selected cell as being alive or dead, and the NES
'B' button (the Z key) to run your subroutine and make the generation advance.

### Details
The grid of cells is stored on page two of the ram. The grid is 16x16 cells,
meaning that the memory address ```$02yx``` refers to column x and row y on
the grid. A cell is considered dead if the number 0 is in the memory location,
and alive if 1 is in the memory location. Your subroutine must replace the
memory on page 2 with the updated grid as if a generation has passed following
the rules of the game of life.

You may use the zero page and the memory on page seven as a scratch space. You
may *not* assume that the memory will be unchanged between generations.

### Tips
 * Make sure your subroutine ends with an [[RTS|rts]] instruction
 * If you make any labels in the subroutine, make sure they all begin with
   ```life_```
 * If you need extra memory locations, only use the [[zero page|zero_page]] and
   the memory on page seven from $700 to $7FF. This data may be changed between
   generations, but during your subroutine, only your program will access it.
 * When you are graded, the only values that will be in the grid will be 0's and
   1's. You do not have to handle error conditions for illegal numbers.
 * If you find your program taking a long time to run, you may want to disable
   graphics before running your subroutine and then turning them back on.
   Remember you'll want to turn on both the sprites (for the cursor) and the
   background (for the grid).
   

% preamble
;----------------------------------------
; Put the name of your program and a basic explanation
; of how it works here.
;
; The START label is where the program begins. Here you
; should initialize your program's variables. Make sure
; you turn on your graphics before the infinite loop
; starts!
;----------------------------------------
START:                                  ;
    .define CURSOR=$400                 ;
    .define TIMERD=$401
    .define BGFLAG=$402
    .define GENFLAG=$403
    LDA #%10010000                      ; enable NMI, sprites from Pattern Table 1
    STA PPUCTRL                         ;
    LDA #%00011110                      ; enable sprites
    STA PPUMASK                         ;
    STA BGFLAG
INFLOOP:
    LDA GENFLAG
    BEQ nogen
    JSR do_life
    LDA #0
    STA GENFLAG
nogen:
    LDA BGFLAG
    BEQ nobgyo
    JSR renderbg
    LDA #0
    STA BGFLAG
nobgyo: JMP INFLOOP                    ;
;----------------------------------------
;
; The NMI (non-maskable interrupt) code is run whenever
; the screen refreshes.
;----------------------------------------
NMI:                                    ;
    LDA TIMERD
    BEQ is_oook
    DEC TIMERD
is_oook:
    JSR handle_input                    ;
    JSR render                          ;
    RTI                                 ; Return from interrupt whenever
;---------------------------------------- the frame code is finished.



;----------------------------------------
; handle input
;----------------------------------------
handle_input:                           ;
    LDA TIMERD
    BEQ is_ok
    JMP not_right
is_ok:
    LDX #1                              ; Strobe the controller
    STX CONTROL1                        ;
    DEX                                 ;
    STX CONTROL1                        ;
                                        ;
    LDA CONTROL1                        ; A: Toggle the cell.
    AND #1                              ;
    BEQ not_a                           ;
    LDX CURSOR                          ; Get the cursor position
    LDA $200,X                             ;
    EOR #1                 ; EOR effectively toggles the bit.
    STA $200,X    
    LDA #1
    STA BGFLAG                          ;
    LDA #10
    STA TIMERD
not_a:                                   ;
    
    LDA CONTROL1                        ; B: generation
    AND #1                              ;
    BEQ not_b                           ;
    LDA #1
    STA BGFLAG
    STA GENFLAG
    LDA #10
    STA TIMERD
not_b:                                  ;
    
    LDA CONTROL1                        ; Start: Skip
    LDA CONTROL1                        ; Select: Skip
                                        ;
    LDA CONTROL1                        ; looking at UP
    AND #1                              ;
    BEQ not_up
    LDA CURSOR
    SEC
    SBC #$10
    STA CURSOR
    LDA #10
    STA TIMERD
                                        ; If not pressed, zero flag is set
not_up:                                 ;
    LDA CONTROL1                        ;
    AND #1                              ;
    BEQ not_down                        ;
    LDA CURSOR
    CLC
    ADC #$10
    STA CURSOR
    LDA #10
    STA TIMERD
not_down:                               ;
    LDA CONTROL1
    AND #1
    BEQ not_left
    LDA CURSOR
    AND #$F0
    STA $FF
    DEC CURSOR
    LDA CURSOR
    AND #$0F
    ORA $FF
    STA CURSOR
    LDA #10
    STA TIMERD
not_left:
    LDA CONTROL1
    AND #1
    BEQ not_right
    LDA CURSOR
    AND #$F0
    STA $FF
    INC CURSOR
    LDA CURSOR
    AND #$0F
    ORA $FF
    STA CURSOR
    LDA #10
    STA TIMERD
not_right:
    RTS                                 ;
;----------------------------------------





;---------------------------------------
; Render! We have to render 256 tiles
; for the grid, so we use the background
; for that, and a sprite for our cursor.
;---------------------------------------
render:
    LDA CURSOR
    AND #%11110000
    LSR A
    ADC #29
    STA $304
    LDA CURSOR
    AND #%00001111
    ASL A
    ASL A
    ASL A
    ADC #48
    STA $307
    LDA #0
    STA $305
    STA $306

    LDA #$00                            ; Now pass the OAM parameters to the PPU
    STA OAMADDR                         ;   and do DMA
    LDA #$03                            ; Page 3 has our sprites.
    STA OAMDMA                          ; Start DMA
    RTS
;----------------------------------------



;----------------------------------------
; render the bg. this is resourc
; intensive, so...
;----------------------------------------
renderbg:
    LDA #%00000000                      ; 
    STA PPUCTRL                         ; disable the interrupts for the
    STA PPUMASK                         ; time being.
    
    ; Do the background now
    LDA PPUSTATUS
    LDA #$20
    STA PPUADDR
    LDA #$00
    STA PPUADDR
    
    LDX #$86
rloop1:    
    LDA #0
    STA PPUDATA
    DEX
    BNE rloop1
    
    LDX #0
    STX $2
    LDY #$10
rloopout:
    LDX #$10
rloop2:
    STX $F1
    LDX $F2
    LDA $200,X
    STA PPUDATA
    INC $F2
    LDX $F1
    DEX
    BNE rloop2
    LDX #$10
rloop3:
    LDA #0
    STA PPUDATA
    DEX
    BNE rloop3
    
    
    DEY
    BNE rloopout
    
    
    
    LDA #%10010000                      ; enable NMI, sprites from Pattern Table 1
    STA PPUCTRL                         ;
    LDA #%00011110                      ; enable sprites
    STA PPUMASK                         ;
    RTS

;---------------------------------------








;----------------------------------------
; do_life - what the student has to do
;----------------------------------------
do_life:






% postamble
;----------------------------------------




; ******************************************************
; STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP
;
; Don't change any of the code underneath this line unless
; you know what you are doing. Unlike many computers, the
; NES has to have time to warm up before it can run code.
; This code will warm up the NES, clear out the memory,
; and put it in a known state so that you can write the
; important stuff up above.
;*******************************************************
.org $F000                              ;
RESET:                                  ;
        SEI                             ; Disable IRQs
        CLD                             ; Disable decimal mode (not on NES)
        LDX #$40                        ;
        STX FRAMECTRL                   ; Disable APU frame IRQ
        LDX #$FF                        ;
        TXS                             ; Set stack pointer to top of stack
        INX                             ; Set X to 0
        STX PPUCTRL                     ; Disable NMI
        STX PPUMASK                     ; Disable rendering
        STX DMCFREQ                     ; Disable DMC IRQs
vblankwait1:                            ; Wait for the first vertical blank to
        BIT PPUSTATUS                   ;    ensure PPU is ready.
        BPL vblankwait1                 ;
clrmem:                                 ; Zero out all memory
        LDA #$00                        ;
        STA $0000, x                    ;
        STA $0100, x                    ;
        STA $0200, x                    ;
        STA $0400, x                    ;
        STA $0500, x                    ;
        STA $0600, x                    ;
        STA $0700, x                    ;
        LDA #$FE                        ;
        STA $0300, x                    ;
        INX                             ;
        BNE clrmem                      ;
vblankwait2:                            ; After 2 vertical blanks, the PPU is
        BIT PPUSTATUS                   ;    is ready to go.
        BPL vblankwait2                 ;
;----------------------------------------
; Now we load our sprite palettes.
;----------------------------------------
        LDA PPUSTATUS                   ; read PPU status to reset the high/low latch
        LDA #$3F                        ;
        STA PPUADDR                     ; write the high byte of $3F00 address
        LDA #$00                        ;
        STA PPUADDR                     ; write the low byte of $3F00 address
        LDX #$00                        ; start out at 0
loadpalettes:                           ;
        LDA palette, x                  ; load data from address (palette + the value in x)
        STA PPUDATA                     ; write to PPU
        INX                             ; X = X + 1
        CPX #$20                        ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
        BNE loadpalettes                ; Branch to LoadPalettesLoop if compare was Not Equal to zero
                                        ; if compare was equal to 32, keep going down
;----------------------------------------
; Now load a blank background. We need to fill $1000 bytes from $2000 to $3000
;----------------------------------------
        LDA PPUSTATUS                   ; read PPU status to reset the high/low latch                                      
        LDA #$20                        ; Background VRAM starts at $2000
        STA PPUADDR                     ;
        LDA #$00                        ;
        STA PPUADDR                     ;
        LDA #$00                        ; We will zero out the VRAM.
        LDX #$10                        ; We have to iterate over 0-256 only $10 times.
        LDY #$00                        ;
bkgloop:                                ;
        STA PPUDATA                     ; Write to the VRAM. Note that no matter how the
        DEY                             ; scroll mirroring is set, this will work.
        BNE bkgloop                     ; BNE will jump if Y != 0
        DEX                             ;
        BNE bkgloop                     ; BNE will jump if X != 0
        LDA #$00                        ;
        STA PPUSCROLL                   ; Set the scrolling to 0
        STA PPUSCROLL                   ;
        JMP START                       ;
;----------------------------------------
; Here's the color palette.
;----------------------------------------
palette:                                ;
        .db $0F,$31,$32,$33             ;
        .db $0F,$35,$36,$37             ;
        .db $0F,$39,$3A,$3B             ;
        .db $0F,$3D,$3E,$0F             ;
        .db $0F,$28,$18,$38             ;
        .db $0F,$1C,$0C,$2C             ;
        .db $0F,$15,$05,$25             ;
        .db $0F,$02,$38,$3C             ;
;----------------------------------------        
; Interrupt table - located in the last six bytes of memory.
;----------------------------------------
        .org $FFFA                      ; Interrupt table is last three words
        .dw NMI                         ; When an NMI happens (once per frame
                                        ;   if enabled, the draw loop)
        .dw RESET                       ; When the processor first turns on or
                                        ;   is reset, it will jump to RESET
        .dw 0                           ; External interrupt IRQ is not used
;----------------------------------------
; Define all of the memory locations in the memory map.
;----------------------------------------
    .define ZEROPAGE=$0000              ;
    .define STACK=$0100                 ;
    .define PPUCTRL=$2000               ;
    .define PPUMASK=$2001               ;
    .define PPUSTATUS=$2002             ;
    .define OAMADDR=$2003               ;
    .define OAMDATA=$2004               ;
    .define PPUSCROLL=$2005             ;
    .define PPUADDR=$2006               ;
    .define PPUDATA=$2007               ;
    .define SQ1VOL=$4000                ;
    .define SQ1SWEEP=$4001              ;
    .define SQ1LO=$4002                 ;
    .define SQ1HI=$4003                 ;
    .define SQ2VOL=$4004                ;
    .define SQ2SWEEP=$4005              ;
    .define SQ2LO=$4006                 ;
    .define SQ2HI=$4007                 ;
    .define TRILIN=$4008                ;
    .define TRILO=$400A                 ;
    .define TRIHI=$400B                 ;
    .define NOISEVOL=$400C              ;
    .define NOISELO=$400E               ;
    .define NOISEHI=$400F               ;
    .define DMCFREQ=$4010               ;
    .define DMCRAW=$4011                ;
    .define DMCSTART=$4012              ;
    .define DMCLEN=$4013                ;
    .define OAMDMA=$4014                ;
    .define SNDCHNL=$4015               ;
    .define CONTROL1=$4016              ;
    .define CONTROL2=$4017              ;
    .define FRAMECTRL=$4018             ;
    .define PRGROM=$8000                ;
;----------------------------------------




