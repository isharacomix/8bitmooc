= LSR: Logical Shift Right

|=Addressing Mode |=Opcode Syntax |=In Hex |=Length |=Cycles |
|Accumulator      |`LSR A`        |$4A     | 1      | 1      |
|Zero Page        |`LSR $44`      |$46     | 2      | 5      |
|Zero Page,X      |`LSR $44,X`    |$56     | 2      | 6      |
|Absolute         |`LSR $4400`    |$4E     | 3      | 6      |
|Absolute,X       |`LSR $4400,X`  |$5E     | 3      | 7      |

**Flags affected:** S Z C

This opcode takes the argument and shifts all of the bits to the right by one.
0 is shifted into bit 7 while bit 0 is shifted into the [[Carry]] flag. Note
that this opcode modifies the argument, so this reads and writes to memory
in the same instruction.

A right-shift is functionally equivalent to dividing the argument by 2.

=== Example
{{{
        -> 11110000 ->
           --------
           01111000 0 = Carry
}}}


