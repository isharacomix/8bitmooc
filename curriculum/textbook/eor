= EOR: bitwise Exclusive OR with accumulator

|=Addressing Mode |=Opcode Syntax |=In Hex |=Length |=Cycles |
|Immediate        |`EOR #$44`     |$49     | 2      | 2      |
|Zero Page        |`EOR $44`      |$45     | 2      | 3      |
|Zero Page,X      |`EOR $44,X`    |$55     | 2      | 4      |
|Absolute         |`EOR $4400`    |$4D     | 3      | 4      |
|Absolute,X       |`EOR $4400,X`  |$5D     | 3      | 4+     |
|Absolute,Y       |`EOR $4400,Y`  |$59     | 3      | 4+     |
|Indirect,X       |`EOR ($44,X)`  |$41     | 2      | 6      |
|Indirect,Y       |`EOR ($44),Y`  |$51     | 2      | 5+     |

**Flags affected:** S Z

This opcode takes the argument and performs a bitwise EOR (also known as XOR)
with the [[Accumulator]], storing it in the register.

The XOR function takes two truth values and returns true whenever the two
inputs have different values. In other, if the two inputs are both True or
both False, EOR returns False. The bitwise EOR
performs a EOR function on all eight bits of the input argument and the
Accumulator, storing the final value for each bit in the Accumulator.

=== Example
{{{
           11110000
       EOR 00111100
           --------
           11001100
}}}

