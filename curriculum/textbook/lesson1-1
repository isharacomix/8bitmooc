= Lesson 1-1: Welcome to the MOOC
Welcome to the #8bitmooc! This is an online course where you will learn about
how software was developed for the computers of 1980s by doing it yourself!

== Why should I take this course?
Computers have grown a lot in the past few decades. Nowadays, there is more
processing power in an old feature phone than was in the spaceship that took the
first man to the moon. Our computers have not only gotten faster and more powerful,
they have also become more sophisticated and more complicated, to the point where
even most computer experts have a hard time explaining how the machine does
what it does.

Have you ever opened a modern computer and looked at the motherboard? It looks almost
like a city with metal streets tightly packed on a green field, running between
ports, pins, and capacitors. There are so many of them that you would have a hard
time following where they all go. However, if you've ever had the unique pleasure
of taking apart an old game console like the Nintendo Entertainment System or
Atari 2600 VCS, it would less like a city and more like a few long winding roads
on the open countryside. Not nearly as overwhelming or confusing. In fact, with
a trained eye, you might even be able to figure out what each road is doing.

Older machines are simple and unsophisticated, making them perfect specimens to
analyze and dissect. There is a certain nostalgic charm to working with less
sophisticated machines, and it's almost ironic how we can return to those days
thanks to [[emulators]] that run on our more sophisticated devices.

So **why** should you take this course? As computers become more ingrained in
our daily life, understanding how they work is an essential part of being an
informed citizen in the 21st century. In this course, we will look at a simple,
but real, platform - the NES - from the point of view of those who built it,
used it, and programmed it.

This is not a course //on// programming... it is a course //with// programming.
By writing programs in the native language of the processor, you will become
intimately familiar with how this machine works. We will look at each piece of
the hardware, and play with it until you know every last detail. You might not
leave this course as a professonal game developer or chiptune composer, but
you'll be able to see a computer without being mystified by how it works.

== What do I need to know in order to take this course?
This course does not assume or require any prior knowledge of programming,
though such knowledge will certainly make certain parts of the course easier.
This course is designed to be a challenging, but accessible, course in
technology literacy.

If you have learned how to use a modern programming language, you will
undoubtedly move through the introductory material more quickly, though
programming in assembly (our language du jour) can take some getting used to.
While the straight answer to most of the programming assignments is usually
pretty easy to figure out, many assignments also have extra challenges that
can be completed to open interesting side paths and shortcuts through the
course earning you extra points and achievements.

== Points and Achievements? What is this, a game?
In a way, yes. Since most of the programming assignments have to do with making
games, it seems only appropriate to make the course into a game itself.
The course is laid out like a game world (this lesson, for example,
is part of World 1-1). As you complete stages, you earn points and achievements,
unlocking new stages as you make your way to the final boss challenge - a
challenge that requires you to put all of your knowledge to the test, demonstrating
mastery of the course content.

There are no B's or C's in this course. Every assignment is graded pass/fail,
and you only move to the next stage when you successfully complete the one you're
on. When you complete all of the boss challenges, you will be awarded a [[badge]]
that you can use to show your retro-game-programming prowess to all of your
friends.

== What's this thing to the right?
There is a chat room that allows you to communicate with other peers who are
currently working on lessons in the same world. Each world has its own chat room
in order to help you meet fellow learners who are at your level in the course.

You are able to like and dislike posts, and you can filter posts based on
how many other users approve them, whether or not your friends approved them,
etc. You are limited to only being able to share messages of up to 140 characters
at a time, meaning that it's a good way to tell others what you are studying,
how you feel about the lessons and challenges, and to discuss topics in the lesson
readings or videos.

== Now what?
Most stages are divided into two portions: //lessons// and //challenges//.
Lessons are textbook pages (like this one), often combined with videos and links
to external websites, while challenges are tests of understanding such as
multiple-choice quizzes, or programming assignments. Click on the "Challenge"
tab at the top of this page and successfully complete the quiz to move on to 
the next stage.

